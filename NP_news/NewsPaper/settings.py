"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rcc!j@!=wi(-nv(wx2r1&qhcp)7ae)ehpm5%fxh32t(ls59$ys'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'modeltranslation',     #  обязательно впишите его перед админом
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'myapp.apps.MyappConfig',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
    'rest_framework',

]
SITE_ID = 1
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'django.middleware.locale.LocaleMiddleware',  #  пдля переключения языков
    'basic.middlewares.TimezoneMiddleware',     # добавляем для активации таймзоны (кастомный)

]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'

LANGUAGES = [
    ('en-us', 'English'),
    ('ru', 'Русский'),
]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        # подключаем новую БД Postgresql
        #  'ENGINE': 'django.db.backends.postgresql',
        #  'NAME': 'postgres',
        #  'USER': 'postgres',
        #  'PASSWORD': '',
        #  'HOST': 'localhost',
        #  'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE ='en-us' #  'ru'  'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_FORMS = {'signup': 'myapp.models.BasicSignupForm'}

ADMINS = (
    ('admin','oOo.example@yandex.ru'),
)
EMAIL_SUBJECT_PREFIX = '[NP]'
EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'oOo.example'  # ваше имя пользователя, например, если ваша почта user@yandex.ru, то сюда надо
# писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = 'pguseosehmvysycf'
EMAIL_USE_SSL = True
SERVER_EMAIL = EMAIL_HOST_USER + '@yandex.ru'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER + '@yandex.ru'


APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"  # формат даты, которую будет воспринимать наш задачник
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds
# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше,
# но как правило, это сильно бьёт по производительности сервера
# celery
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

#  Кэширование
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

#  Логирование
#  https://webdevblog.ru/loggirovanie-v-django-nachalnyj-obzor/


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'style': '{',
    'formatters':{
        'first': {
            'format':'%(levelname)s %(message)s %(asctime)s'
        },
        'second': {
            'format':'%(levelname)s %(message)s %(pathname)s %(asctime)s'
        },
        'third': {
            'format':'%(levelname)s %(message)s %(pathname)s (exc_info) %(asctime)s'
        },
        'fourth_gen': {
            'format':'%(levelname)s %(message)s %(module)s %(asctime)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console_debug': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'first',
            'filters': ['require_debug_true'],
        },
        'console_warning': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'second',
            'filters': ['require_debug_true'],
        },
        'console_err': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'third',
            'filters': ['require_debug_true'],
        },
        'file_general': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'fourth_gen',
            'filename': 'general.log',
            'filters': ['require_debug_false'],  # false
        },
        'file_err': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'third',  #  third
            'filename': 'errors.log',

        },
        'file_security': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'fourth_gen',
            'filename': 'security.log',

        },
        'send_mail': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'second',
            'filters': ['require_debug_false'],  # false
        },
    },
    'loggers': {
        'django': {
            'level': 'INFO',  # DEBUG
            'handlers': ['console_debug', 'console_warning', 'console_err', 'file_general',],
            'propagate': True,

        },
        'django.request': {
            'handlers': ['file_err', 'send_mail'],
            'propagate': True,
        },
        'django.server': {
            'handlers': ['file_err','send_mail'],
            'propagate': True,
        },
        'django.template': {
            'level': 'DEBUG',
            'handlers': ['file_err',],
            'propagate': True,
        },
        'django.db_backends': {
            'handlers': ['file_err',],
            'propagate': True,
        },
        'django.security': {
            'handlers': ['file_security',],
            'propagate': True,
        },
    }
}


LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],


}